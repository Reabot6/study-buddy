import React, { useState } from 'react';
import { BookOpen, Download, Calendar, Tag, Search, Filter } from 'lucide-react';
import { DailyLearning as DailyLearningType, Course } from '../types';

interface DailyLearningProps {
  dailyLearnings: DailyLearningType[];
  courses: Course[];
  onLearningAdd: (learning: Omit<DailyLearningType, 'id'>) => void;
  onLearningUpdate: (id: string, updates: Partial<DailyLearningType>) => void;
  onLearningDelete: (id: string) => void;
}

const DailyLearning: React.FC<DailyLearningProps> = ({
  dailyLearnings,
  courses,
  onLearningAdd,
  onLearningUpdate,
  onLearningDelete,
}) => {
  const [content, setContent] = useState('');
  const [selectedCourse, setSelectedCourse] = useState('');
  const [tags, setTags] = useState('');
  const [searchTerm, setSearchTerm] = useState('');
  const [filterCourse, setFilterCourse] = useState('');
  const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split('T')[0]);

  const today = new Date().toISOString().split('T')[0];
  const todayLearning = dailyLearnings.find(learning => learning.date === today);

  const handleSave = () => {
    if (!content.trim()) {
      alert('Please write something you learned today!');
      return;
    }

    const learningData = {
      date: selectedDate,
      content: content.trim(),
      courseId: selectedCourse || undefined,
      tags: tags.split(',').map(tag => tag.trim()).filter(tag => tag.length > 0),
    };

    if (todayLearning && selectedDate === today) {
      onLearningUpdate(todayLearning.id, learningData);
    } else {
      onLearningAdd(learningData);
    }

    if (selectedDate === today) {
      setContent('');
      setSelectedCourse('');
      setTags('');
    }
    
    alert('Your learning has been saved! üåü');
  };

  const handleDownload = (learning: DailyLearningType) => {
    const course = courses.find(c => c.id === learning.courseId);
    const fileName = `learning-${learning.date}${course ? `-${course.name.replace(/\s+/g, '-')}` : ''}.txt`;
    
    let content = `What I Learnt Today - ${new Date(learning.date).toLocaleDateString()}\n`;
    content += `${'='.repeat(50)}\n\n`;
    
    if (course) {
      content += `Course: ${course.name}\n\n`;
    }
    
    if (learning.tags.length > 0) {
      content += `Tags: ${learning.tags.join(', ')}\n\n`;
    }
    
    content += `Learning Notes:\n`;
    content += `${'-'.repeat(20)}\n`;
    content += learning.content;
    content += `\n\n`;
    content += `Generated by Princess Study Companion üëë\n`;
    content += `Date: ${new Date().toLocaleString()}`;

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = fileName;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const handleDownloadAll = () => {
    if (dailyLearnings.length === 0) {
      alert('No learning notes to download!');
      return;
    }

    let content = `My Learning Journey - Complete Notes\n`;
    content += `${'='.repeat(50)}\n\n`;
    content += `Total entries: ${dailyLearnings.length}\n`;
    content += `Date range: ${dailyLearnings[dailyLearnings.length - 1]?.date} to ${dailyLearnings[0]?.date}\n\n`;

    dailyLearnings
      .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
      .forEach((learning, index) => {
        const course = courses.find(c => c.id === learning.courseId);
        
        content += `${index + 1}. ${new Date(learning.date).toLocaleDateString()}\n`;
        content += `${'-'.repeat(30)}\n`;
        
        if (course) {
          content += `Course: ${course.name}\n`;
        }
        
        if (learning.tags.length > 0) {
          content += `Tags: ${learning.tags.join(', ')}\n`;
        }
        
        content += `\n${learning.content}\n\n`;
        content += `${'¬∑'.repeat(40)}\n\n`;
      });

    content += `Generated by Princess Study Companion üëë\n`;
    content += `Export Date: ${new Date().toLocaleString()}`;

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `my-learning-journey-${today}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  // Filter learnings based on search and course filter
  const filteredLearnings = dailyLearnings.filter(learning => {
    const matchesSearch = learning.content.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         learning.tags.some(tag => tag.toLowerCase().includes(searchTerm.toLowerCase()));
    const matchesCourse = !filterCourse || learning.courseId === filterCourse;
    return matchesSearch && matchesCourse;
  });

  // Load today's content if editing today's entry
  React.useEffect(() => {
    if (selectedDate === today && todayLearning) {
      setContent(todayLearning.content);
      setSelectedCourse(todayLearning.courseId || '');
      setTags(todayLearning.tags.join(', '));
    } else if (selectedDate !== today) {
      const dayLearning = dailyLearnings.find(l => l.date === selectedDate);
      if (dayLearning) {
        setContent(dayLearning.content);
        setSelectedCourse(dayLearning.courseId || '');
        setTags(dayLearning.tags.join(', '));
      } else {
        setContent('');
        setSelectedCourse('');
        setTags('');
      }
    }
  }, [selectedDate, todayLearning, dailyLearnings]);

  return (
    <div className="p-4 md:p-6 space-y-4 md:space-y-6">
      <div className="text-center mb-6 md:mb-8">
        <h2 className="text-2xl md:text-3xl font-bold text-gray-800 mb-2">
          What I Learnt Today üìù
        </h2>
        <p className="text-sm md:text-base text-gray-600">Capture your daily learning journey and insights</p>
      </div>

      {/* Today's Learning Entry */}
      <div className="bg-white p-4 md:p-6 rounded-xl shadow-md">
        <h3 className="text-base md:text-lg font-semibold text-gray-800 mb-4 flex items-center">
          <BookOpen className="h-5 w-5 mr-2 text-rose-500" />
          {selectedDate === today ? "Today's Learning" : `Learning for ${new Date(selectedDate).toLocaleDateString()}`}
        </h3>
        
        <div className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-xs md:text-sm font-medium text-gray-700 mb-2">
                Date
              </label>
              <input
                type="date"
                value={selectedDate}
                onChange={(e) => setSelectedDate(e.target.value)}
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-rose-500 focus:border-transparent"
              />
            </div>
            <div>
              <label className="block text-xs md:text-sm font-medium text-gray-700 mb-2">
                Course (Optional)
              </label>
              <select
                value={selectedCourse}
                onChange={(e) => setSelectedCourse(e.target.value)}
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-rose-500 focus:border-transparent"
              >
                <option value="">No specific course</option>
                {courses.map((course) => (
                  <option key={course.id} value={course.id}>
                    {course.name}
                  </option>
                ))}
              </select>
            </div>
          </div>

          <div>
            <label className="block text-xs md:text-sm font-medium text-gray-700 mb-2">
              Tags (comma-separated)
            </label>
            <input
              type="text"
              value={tags}
              onChange={(e) => setTags(e.target.value)}
              placeholder="e.g., important, exam-topic, review-later"
              className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-rose-500 focus:border-transparent"
            />
          </div>

          <div>
            <label className="block text-xs md:text-sm font-medium text-gray-700 mb-2">
              What did you learn? ‚ú®
            </label>
            <textarea
              value={content}
              onChange={(e) => setContent(e.target.value)}
              placeholder="Write about your key learnings, insights, concepts you understood, questions that arose, connections you made..."
              className="w-full h-32 md:h-40 p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-rose-500 focus:border-transparent resize-none text-sm md:text-base"
            />
          </div>

          <button
            onClick={handleSave}
            className="w-full bg-gradient-to-r from-rose-500 to-purple-600 hover:from-rose-600 hover:to-purple-700 text-white py-3 px-4 md:px-6 rounded-lg font-medium transition-all duration-200 flex items-center justify-center space-x-2"
          >
            <BookOpen size={20} />
            <span>{todayLearning && selectedDate === today ? 'Update' : 'Save'} Learning</span>
          </button>
        </div>
      </div>

      {/* Learning History */}
      <div className="bg-white p-4 md:p-6 rounded-xl shadow-md">
        <div className="flex justify-between items-center mb-4">
          <h3 className="text-base md:text-lg font-semibold text-gray-800 flex items-center">
            <Calendar className="h-5 w-5 mr-2 text-purple-500" />
            Learning History ({dailyLearnings.length} entries)
          </h3>
          <button
            onClick={handleDownloadAll}
            disabled={dailyLearnings.length === 0}
            className="bg-green-500 hover:bg-green-600 disabled:bg-gray-400 text-white px-3 md:px-4 py-2 rounded-lg text-sm md:text-base font-medium transition-all duration-200 flex items-center space-x-2"
          >
            <Download size={16} />
            <span className="hidden sm:inline">Download All</span>
            <span className="sm:hidden">Export</span>
          </button>
        </div>

        {/* Search and Filter */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
          <div className="relative">
            <Search className="absolute left-3 top-3 h-5 w-5 text-gray-400" />
            <input
              type="text"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              placeholder="Search your learnings..."
              className="w-full pl-10 p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
            />
          </div>
          <div className="relative">
            <Filter className="absolute left-3 top-3 h-5 w-5 text-gray-400" />
            <select
              value={filterCourse}
              onChange={(e) => setFilterCourse(e.target.value)}
              className="w-full pl-10 p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
            >
              <option value="">All courses</option>
              {courses.map((course) => (
                <option key={course.id} value={course.id}>
                  {course.name}
                </option>
              ))}
            </select>
          </div>
        </div>

        {/* Learning Entries */}
        <div className="space-y-4">
          {filteredLearnings.length > 0 ? (
            filteredLearnings
              .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
              .map((learning) => {
                const course = courses.find(c => c.id === learning.courseId);
                return (
                  <div key={learning.id} className="border border-gray-200 rounded-lg p-3 md:p-4 hover:shadow-md transition-all duration-200">
                    <div className="flex justify-between items-start mb-3">
                      <div className="flex items-center space-x-3">
                        <div className="text-xs md:text-sm font-medium text-gray-800">
                          {new Date(learning.date).toLocaleDateString('en-US', {
                            weekday: 'long',
                            year: 'numeric',
                            month: 'long',
                            day: 'numeric'
                          })}
                        </div>
                        {course && (
                          <span className={`px-2 py-1 text-xs rounded-full bg-${course.color}-100 text-${course.color}-800`}>
                            {course.name}
                          </span>
                        )}
                      </div>
                      <button
                        onClick={() => handleDownload(learning)}
                        className="text-gray-400 hover:text-blue-600 transition-colors duration-200"
                      >
                        <Download size={16} />
                      </button>
                    </div>
                    
                    <p className="text-sm md:text-base text-gray-700 mb-3 whitespace-pre-wrap">{learning.content}</p>
                    
                    {learning.tags.length > 0 && (
                      <div className="flex flex-wrap gap-2">
                        {learning.tags.map((tag, index) => (
                          <span key={index} className="inline-flex items-center px-2 py-1 text-xs bg-gray-100 text-gray-700 rounded-full">
                            <Tag size={10} className="mr-1" />
                            {tag}
                          </span>
                        ))}
                      </div>
                    )}
                  </div>
                );
              })
          ) : (
            <div className="text-center py-8">
              <BookOpen className="h-16 w-16 text-gray-400 mx-auto mb-4" />
              <h3 className="text-base md:text-lg font-semibold text-gray-600 mb-2">
                {searchTerm || filterCourse ? 'No matching entries found' : 'No learning entries yet'}
              </h3>
              <p className="text-sm md:text-base text-gray-500">
                {searchTerm || filterCourse 
                  ? 'Try adjusting your search or filter criteria'
                  : 'Start documenting your daily learnings to build your knowledge base!'
                }
              </p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default DailyLearning;